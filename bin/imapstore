#! /usr/bin/ruby
$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + "/../lib"))

require 'rubygems'
require 'imapstore'
require 'getoptions'

COMMAND_LIST = ['ls', 'rm', 'put', 'get', 'rmdir', 'mkdir', 'quota', 'setup' ]
opt = GetOptions.new(%w( help subject=s command=s dir=s files=@s recursive! versioned! all! imapstore:s x! ))

if opt['help']
	puts "Usage: imapstore -c <#{COMMAND_LIST.join(', ')}> -s <subject> -d <folder> -f <file list or glob> "
	puts "                 -i <imapstore> -x --recursive --versioned --all"
	puts "       imapstore -h"
	exit 0
end

imapstore  = opt['imapstore'] || "default"
command = opt['command'] || "ls"
dir = opt['dir'] || "INBOX"
files = opt['files'] || "*"
subject = opt['subject'] || ""
recursive = opt['recursive'] || false
all = opt['all'] || false
versioned = opt['versioned']
verbose = opt['x'] || false


begin
if COMMAND_LIST.include? command 
  if command == 'setup'
	  IMAPSTORE::Imapstore.create_config_file
    exit
  end

	
	i = IMAPSTORE::Imapstore.new(File.expand_path('~/.imapstore/config.yml'), imapstore)
	i.versioned=versioned if versioned!=nil
	i.verbose = verbose
	
	case command
		when 'ls':
			files.each do |f|
				f = /.+/ if f == '*'
				
				i.ls(dir, Regexp.new(f), recursive, all).each do |a|
					puts a
				end	
			end
		when 'put':
			
			files.each do |f|
				local_dir = File.dirname(f)
				f = local_dir + "/**/" + File.basename(f) if recursive

				Dir.glob(f, all==true ? File::FNM_DOTMATCH : 0) do |f2|					
					if(!File.directory? f2)
						remote_dir = dir
						append_dir = File.dirname(f2).sub(/^#{local_dir}\/*/,"")
						remote_dir = remote_dir + "/" + append_dir if append_dir != ""
						puts "Storing file #{f2} in remote dir \"#{remote_dir}\""
						i.store_file(f2,remote_dir,subject)
					end
				end
			end
		when 'get':
			files.each do |f|
				f = /.+/ if f == '*'
				puts "Getting files"
				i.get_file(dir, Regexp.new(f), recursive, all).each do |a|
					puts a
				end	
			end
		when 'rm':
			files.each do |f|
				f = /.+/ if f == '*'
				puts "Deleting files"
				i.rm_file(dir, Regexp.new(f), recursive, all).each do |a|
					puts a
				end	
			end			
		when 'mkdir':
			i.mkdir(dir)
		when 'rmdir':
			i.rmdir(dir, recursive, all)
		when 'quota':
			q = i.quota("INBOX")
			puts "Used  #{q[1]['usage'].to_s} of #{q[1]['quota'].to_s}"
		else
			puts "unimplemented command #{command}"	
	end
			


	i.disconnect
end
rescue
	puts "An error has occured #{$!}"
end